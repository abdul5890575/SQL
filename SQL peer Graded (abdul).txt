Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
	ii. Business table = 10000
	iii. Category table = 10000
	iv. Checkin table = 10000
	v. elite_years table = 10000
	vi. friend table = 10000
	vii. hours table = 10000
	viii. photo table = 10000
	ix. review table = 10000
	x. tip table = 10000
	xi. user table = 10000


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.


	i. Business = 10000 (id)
	ii. Hours = 1562 (business_id)
	iii. Category = 2643 (business_id)
	iv. Attribute = 1115 (business_id)
	v. Review = 8090 (business_id)
	vi. Checkin = 493 (business_id)
	vii. Photo = 6493 (business_id)
	viii. Tip = 3979 (business_id)
	ix. User = 10000 (id)
	x. Friend = 11 (user_id)
	xi. Elite_years = 2780 (user_id)


Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: NO
	
	
	SQL code used to arrive at answer:
	
	select * from user
        where( id or name or review_count or yelping_since or useful or funny or cool or fans or average_stars 
               or compliment_hot or compliment_more or compliment_profile or compliment_cute or compliment_list 
               or compliment_note or compliment_plain or compliment_cool or compliment_funny or compliment_writer 
               or compliment_photos) is null

	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:1		max:5		avg:3.7082 
		
	
	ii. Table: Business, Column: Stars
	
		min:1		max:5		avg: 3.6549 
		
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144 
		
	
	iv. Table: Checkin, Column: Count
	
		min:1		max:53		avg: 1.9414 
		
	
	v. Table: User, Column: Review_count
	
		min:0		max:2000	avg:24.2995 
		


5. List the cities with the most reviews in descending order:

	SELECT b.city, sum(b.review_count) AS count_reviews
	FROM business b
	GROUP BY b.city
	ORDER BY count_reviews DESC;
	
	
	Copy and Paste the Resulting Table Below 
	
	+-----------------+---------------+
	| city            | count_reviews |
	+-----------------+---------------+
	| Las Vegas       |         82854 |
	| Phoenix         |         34503 |
	| Toronto         |         24113 |
	| Scottsdale      |         20614 |
	| Charlotte       |         12523 |
	| Henderson       |         10871 |
	| Tempe           |         10504 |
	| Pittsburgh      |          9798 |
	| Montreal        |          9448 |
	| Chandler        |          8112 |
	| Mesa            |          6875 |
	| Gilbert         |          6380 |
	| Cleveland       |          5593 |
	| Madison         |          5265 |
	| Glendale        |          4406 |
	| Mississauga     |          3814 |
	| Edinburgh       |          2792 |
	| Peoria          |          2624 |
	| North Las Vegas |          2438 |
	| Markham         |          2352 |
	| Champaign       |          2029 |
	| Stuttgart       |          1849 |
	| Surprise        |          1520 |
	| Lakewood        |          1465 |
	| Goodyear        |          1155 |
	+-----------------+---------------+
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon
 	  
+-------+------+--------------------+
| stars | city | count(distinct id) |
+-------+------+--------------------+
|   1.5 | Avon |                  1 |
|   2.5 | Avon |                  2 |
|   3.5 | Avon |                  3 |
|   4.0 | Avon |                  2 |
|   4.5 | Avon |                  1 |
|   5.0 | Avon |                  1 |
+-------+------+--------------------+



SQL code used to arrive at answer:

	select stars,count(distinct id)  as count
	from business 
 	where city = 'Avon'
 	group by stars
 
Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------+-------+
| stars | count |
+-------+-------+
|   1.5 |     1 |
|   2.5 |     2 |
|   3.5 |     3 |
|   4.0 |     2 |
|   4.5 |     1 |
|   5.0 |     1 |
+-------+-------+

ii. Beachwood

SQL code used to arrive at answer:

	select stars,count(distinct id)  as count
	from business 
	where city = 'Beachwood'
 	group by stars
 

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
		
+-------+-------+
| stars | count |
+-------+-------+
|   2.0 |     1 |
|   2.5 |     1 |
|   3.0 |     2 |
|   3.5 |     2 |
|   4.0 |     1 |
|   4.5 |     2 |
|   5.0 |     5 |
+-------+-------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	select name, id, sum(review_count)
	from user
	group by id
	order by sum(review_count) desc

	
	Copy and Paste the Result Below:

+-----------+------------------------+-------------------+
| name      | id                     | sum(review_count) |
+-----------+------------------------+-------------------+
| Gerald    | -G7Zkl1wIWBBmD0KRy_sCw |              2000 |
| Sara      | -3s52C4zL_DHRK0ULG6qtg |              1629 |
| Yuri      | -8lbUNlXVSoXqaRRiHiSNg |              1339 |


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

	ANS) No, because the people with the most sum of review counts does not have have the most fans.
	

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: More for love=1780 and less for hate=232

	
	SQL code used to arrive at answer:
	
	SELECT COUNT(distinct text) AS Love    --Run this first seperatly to get the count for love
	FROM review
	WHERE text LIKE '%love%' 


	SELECT COUNT(distinct text) AS Hate	--Run this after seperatly to get the count for hate
	FROM review
	WHERE text LIKE '%hate%' 


	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	select distinct(id),name,fans
	from user
	group by id
	order by fans desc

	Copy and Paste the Result Below:

+------------------------+-----------+------+
| id                     | name      | fans |
+------------------------+-----------+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
| -B-QEUESGWHPE_889WJaeg | Mark      |  115 |
	
	
11. Is there a strong relationship (or correlation) between having a high number of fans and being listed as "useful" or "funny?" Out of the top 10 users with the highest number of fans, what percent are also listed as “useful” or “funny”?

Key:
0% - 25% - Low relationship
26% - 75% - Medium relationship
76% - 100% - Strong relationship
	
	SQL code used to arrive at answer:

	select  distinct(id),name,fans,sum(useful)+sum(funny) as total, sum(useful),sum(funny)
	from user
	group by id
	order by fans desc

	
	Copy and Paste the Result Below:
+------------------------+-----------+------+--------+-------------+------------+
| id                     | name      | fans |  total | sum(useful) | sum(funny) |
+------------------------+-----------+------+--------+-------------+------------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |   5780 |        3226 |       2554 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |    395 |         257 |        138 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 | 245340 |      122921 |     122419 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |  19848 |       17524 |       2324 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |  11480 |        4834 |       6646 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |     61 |          48 |         13 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |   1734 |        1062 |        672 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |  18724 |        9363 |       9361 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |  17457 |        9851 |       7606 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |    605 |         455 |        150 |
| -B-QEUESGWHPE_889WJaeg | Mark      |  115 |   4578 |        4008 |        570 |

	
	Please explain your findings and interpretation of the results:
	
They are all useful and funny and there is a low realationship as total/sum of total (among only the top 10 ) gives most of them under 25%.
	
	

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
	Step 1)
  	SELECT  business.name, business.city, business.stars,category.category		(selected edulis and 99 cent sushi)
 	FROM business 
	join category on business.id = category.business_id 
  	join hours on business.id =hours.business_id
        left join review on business.id =review.business_id
	where business.city = 'Toronto' and category='Restaurants'
  	group by business.stars
  	order by business.stars

	step 2)
	select hours.hours,business.name
	from business
	join hours on business.id =hours.business_id
	where business.city = 'Toronto' and name='Edulis'    Change the names to get the followng hours distribution. 

	

i. Do the two groups you chose to analyze have a different distribution of hours?
	
	Yes, the hour distribution varies

+-----------------------+--------+         <--- 3-4Stars
| hours                 | name   |
+-----------------------+--------+
| Sunday|12:00-16:00    | Edulis |
| Friday|18:00-23:00    | Edulis |
| Wednesday|18:00-23:00 | Edulis |
| Thursday|18:00-23:00  | Edulis |
| Saturday|18:00-23:00  | Edulis |
+-----------------------+--------+

+-----------------------+-------------+
| hours                 | name        |		<----3-4 stars
+-----------------------+-------------+
| Monday|11:00-23:00    | Sushi Osaka |
| Tuesday|11:00-23:00   | Sushi Osaka |
| Friday|11:00-23:00    | Sushi Osaka |
| Wednesday|11:00-23:00 | Sushi Osaka |
| Thursday|11:00-23:00  | Sushi Osaka |
| Sunday|14:00-23:00    | Sushi Osaka |
| Saturday|11:00-23:00  | Sushi Osaka |
+-----------------------+-------------+


+-----------------------+---------------+
| hours                 | name          |	less than 3 stars
+-----------------------+---------------+
| Monday|11:00-23:00    | 99 Cent Sushi |
| Tuesday|11:00-23:00   | 99 Cent Sushi |
| Friday|11:00-23:00    | 99 Cent Sushi |
| Wednesday|11:00-23:00 | 99 Cent Sushi |
| Thursday|11:00-23:00  | 99 Cent Sushi |
| Sunday|11:00-23:00    | 99 Cent Sushi |
| Saturday|11:00-23:00  | 99 Cent Sushi |
+-----------------------+---------------+

+----------------------+-----------+
| hours                | name      |
+----------------------+-----------+	less than 3stars
| Monday|9:00-23:00    | Pizzaiolo |
| Tuesday|9:00-23:00   | Pizzaiolo |
| Friday|9:00-4:00     | Pizzaiolo |
| Wednesday|9:00-23:00 | Pizzaiolo |
| Thursday|9:00-23:00  | Pizzaiolo |
| Sunday|10:00-23:00   | Pizzaiolo |
| Saturday|10:00-4:00  | Pizzaiolo |
+----------------------+-----------+


ii. Do the two groups you chose to analyze have a different number of reviews?
         
Yes 3-4 has more total reviews.


	select name,city,review_count,neighborhood
	from business b
	where name in ('99 Cent Sushi', 'Edulis', 'Pizzaiolo', 'Sushi Osaka')

+---------------+---------+--------------+------------------------+
| name          | city    | review_count | neighborhood           |
+---------------+---------+--------------+------------------------+
| Sushi Osaka   | Toronto |            8 | Etobicoke              |
| Pizzaiolo     | Toronto |           17 | The Annex              |
| Pizzaiolo     | Toronto |           23 | Yonge and St. Clair    |
| 99 Cent Sushi | Toronto |            5 | Downtown Core          |
| Pizzaiolo     | Toronto |           34 | Entertainment District |
| Edulis        | Toronto |           89 | Niagara                |
+---------------+---------+--------------+------------------------+


iii. Are you able to infer anything from the location data provided between these two groups? Explain.

SQL code used for analysis:

	select name,city,address,neighborhood,postal_code
	select name,city,address,neighborhood,postal_code,latitude,longitude
	from business 
	where name in ('99 Cent Sushi', 'Edulis', 'Pizzaiolo', 'Sushi Osaka')

+---------------+---------+-----------------------+------------------------+-------------+----------+-----------+
| name          | city    | address               | neighborhood           | postal_code | latitude | longitude |
+---------------+---------+-----------------------+------------------------+-------------+----------+-----------+
| Sushi Osaka   | Toronto | 5084 Dundas Street W  | Etobicoke              | M9A 1C2     |  43.6452 |  -79.5324 |
| Pizzaiolo     | Toronto | 346 Bloor Street W    | The Annex              | M5S 2J2     |  43.6666 |  -79.4045 |
| Pizzaiolo     | Toronto | 13 St Clair Ave W     | Yonge and St. Clair    | M4V         |  43.6878 |  -79.3947 |
| 99 Cent Sushi | Toronto | 389 Church Street     | Downtown Core          | M5B 2E5     |  43.6614 |   -79.379 |
| Pizzaiolo     | Toronto | 270 Adelaide Street W | Entertainment District | M5H 1X6     |  43.6479 |  -79.3901 |
| Edulis        | Toronto | 169 Niagara Street    | Niagara                | M5V         |  43.6419 |  -79.4066 |
+---------------+---------+-----------------------+------------------------+-------------+----------+-----------+

The areas with a bigger nightlife like Entertainment District/ Downtown Core have low rating (cheaper) food and there are more locations for cheap fast food.
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
  	
	Average star recieved by open are higher than closed       
         
ii. Difference 2:
         
         Review count is higher for open 
         
SQL code used for analysis:

	select review_count,avg(stars),is_open
	from business
	group by is_open


	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
	Sentiment analysis
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                           
     I belevie this is a very powerful tool when it comes to  analyzing public opinion about a certain product. If we can correctly acess how
     our consumers feel about the product we are creating or the kind of changes the consumers want us to implement,then it can really aid in our 
     product sales. Text mining is a widely used techniqe used and I will try to compare few positive words against negavtive to see what the general public's
     opinion is in the text data found in reviews. The idea is simple,if there are more positive words then negative then poeple have a good view and vice versa.

iii. Output of your finished dataset:

+----------+
| Positive |
+----------+
|      607 |
|     1063 |
|     1780 |
|     3498 |
+----------+

+----------+
| Negative |
+----------+
|      205 |
|      232 |
|      265 |
|      800 |
+----------+
         
         
iv. Provide the SQL code you used to create your final dataset:

For Positive

SELECT COUNT(distinct text) AS Positive
	FROM review
	WHERE text LIKE  '%love%' 
	union 
	SELECT COUNT(distinct text)   
	FROM review
	WHERE text LIKE  '%good%' 
	union
	SELECT COUNT(distinct text)    
	FROM review
	WHERE text LIKE  '%excellent%' 
	union
	SELECT COUNT(distinct text)     
	FROM review
	WHERE text LIKE  '%amazing%' 


	For Negative

SELECT COUNT(distinct text) AS Negative
	FROM review
	WHERE text LIKE  '%hate%' 
	union 
	SELECT COUNT(distinct text)   
	FROM review
	WHERE text LIKE  '%rude%' 
	union
	SELECT COUNT(distinct text)    
	FROM review
	WHERE text LIKE  '%bad%' 
	union
	SELECT COUNT(distinct text)     
	FROM review
	WHERE text LIKE  '%terrible%' 